# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

docker_env = dict(**os.environ)
docker_env["BUILDMASTER"] = os.environ["BUILDMASTER"]
docker_env["BUILDMASTER_PORT"] = 9989


docker_env["WORKERNAME"] = "docker_front_end"


dockerFrontEndWorker = worker.DockerLatentWorker(
    docker_env["WORKERNAME"], 
    os.environ.get("WORKERPASS","password"),
    docker_host='tcp://192.168.205.21:2376',
    image='192.168.205.21:25000/buildbot_worker_front_end:0.0.3',
    custom_context=True,
    buildargs = docker_env,
    masterFQDN= docker_env["BUILDMASTER"],
    followStartupLogs=True,
    hostconfig = {
       # "links":{"buildbot":"buildbot"},
        "network_mode":"container:buildbot"
    }
)

docker_env["WORKERNAME"] = "docker_back_end"

dockerBackEndWorker = worker.DockerLatentWorker(
    docker_env["WORKERNAME"], 
    os.environ.get("WORKERPASS","password"),
    docker_host='tcp://192.168.205.21:2376',
    image='192.168.205.21:25000/buildbot_worker_back_end:0.0.3',
    custom_context=True,
    buildargs = docker_env,
    masterFQDN= docker_env["BUILDMASTER"],
    followStartupLogs=True,
    hostconfig = {
       # "links":{"buildbot":"buildbot"},
        "network_mode":"container:buildbot"
    }
)

staticWorker = worker.Worker("buildbot_worker", os.environ.get("WORKERPASS"))

c['workers'] = [
    staticWorker,
    dockerFrontEndWorker,
    dockerBackEndWorker
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/buildbot/pyflakes.git',
        workdir='/tmp/', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build


ALL_BUILDER_NAMES = [
"runtests_standard"
,"runtests_back_end"
,"runtests_front_end"
#,"runtests_integration"
]

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=ALL_BUILDER_NAMES))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=ALL_BUILDER_NAMES))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

REPO_URL = 'https://github.com/myiremark/web2py-restful-openapi-crossplatform-app'

factory = util.BuildFactory()
factory.addStep(
    steps.Git(repourl=REPO_URL, mode='incremental')
)

factory.addStep(
    steps.ShellCommand(
        command="cd ./client/ionic && npm install",
        env={"PATH":"/root/.nvm/versions/node/v10.19.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"}
    )
)

factory.addStep(
    steps.ShellCommand(
        command="cd ./client/ionic && npm run test",
        env={"PATH":"/root/.nvm/versions/node/v10.19.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"}
    )
)


success_factory = util.BuildFactory()
success_factory.addStep(steps.ShellCommand(command=["echo", "Wow that was a tough test"]))

factory_front_end_build = util.BuildFactory()

factory_front_end_build.addStep(
    steps.Git(repourl=REPO_URL, mode='incremental')
)

factory_front_end_build.addStep(
    steps.ShellCommand(
        command="cd ./client/ionic && npm install",
        env={"PATH":"/root/.nvm/versions/node/v10.19.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"}
    )
)

factory_front_end_build.addStep(
    steps.ShellCommand(
        command="cd ./client/ionic && npm run test",
        env={"PATH":"/root/.nvm/versions/node/v10.19.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"}
    )
)


factory_back_end_build = util.BuildFactory()
factory_back_end_build.addStep(steps.Git(repourl=REPO_URL, mode='incremental'))
factory_back_end_build.addStep(
    steps.ShellCommand(
        command="cd /opt/web2py/applications/api/tests/ && pytest",
        env={"PATH":"/root/.nvm/versions/node/v10.19.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"}
    )
)

factory_deploy = util.BuildFactory()
factory_deploy.addStep(steps.Git(repourl=REPO_URL, mode='incremental'))
factory_deploy.addStep(steps.ShellCommand(command=["echo", "testing back end"]))



c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="runtests_standard",
      workernames=["buildbot_worker"],
      factory=factory_front_end_build))

c['builders'].append(
    util.BuilderConfig(name="runtests_back_end",
      workernames=["docker_back_end"],
      factory=factory_back_end_build))


c['builders'].append(
    util.BuilderConfig(name="runtests_front_end",
      workernames=["docker_front_end"],
      factory=factory_front_end_build))

#c['builders'].append(util.BuilderConfig(name="deploy",workernames=["buildbot_worker"],factory=factory_back_end_build))

#c['builders'].append(util.BuilderConfig(name="runtests_integration",workernames=["docker"],factory=success_factory))

#c['builders'].append(util.BuilderConfig(name="promote",workernames=["docker"],factory=success_factory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "GoodGoods"
c['titleURL'] = "https://github.com/web2py-restful-openapi-crossplatform-app"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
